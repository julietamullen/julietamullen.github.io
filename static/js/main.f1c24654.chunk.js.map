{"version":3,"sources":["components/Form.js","components/Todo.js","components/Todolist.js","App.js","reportWebVitals.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","className","value","onChange","e","target","type","placeholder","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","console","log","map","item","filter","el","Todolist","filtered","App","useState","status","setFiltered","useEffect","localStorage","getItem","setItem","JSON","stringify","localTodos","parse","getLocalTodos","handleFilter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOA6CeA,EA3CF,SAAC,GAA4D,IAA3DC,EAA0D,EAA1DA,UAAWC,EAA+C,EAA/CA,aAAcC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UAcrD,OACI,iCACA,sBAAKC,UAAU,WAAf,UACI,uBACAC,MAASN,EACTO,SAlBgB,SAACC,GAErBP,EAAaO,EAAEC,OAAOH,QAiBlBI,KAAK,OACLL,UAAU,aACVM,YAAY,4BAEZ,wBACAC,QApBiB,SAACJ,GACtBA,EAAEK,iBAEFV,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAACY,KAAMd,EAAWe,WAAW,EAAOC,GAAkB,IAAdC,KAAKC,aACjEjB,EAAa,KAiBTI,UAAU,cACVK,KAAK,SAHL,SAKA,mBAAGL,UAAU,qBAGjB,qBAAKE,SArBY,SAACC,GAClBJ,EAAUI,EAAEC,OAAOH,QAoBWD,UAAU,SAAxC,SACI,yBAAQc,KAAK,QAAQd,UAAU,eAA/B,UACA,wBAAQC,MAAM,MAAd,iBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,cAAd,kC,OCRGc,EA5BF,SAAC,GAAqC,IAAnCN,EAAkC,EAAlCA,KAAMO,EAA4B,EAA5BA,KAAMnB,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/BmB,QAAQC,IAAIrB,GAcZ,OACI,sBAAKG,UAAU,WAAf,UACA,oBAAIA,UAAS,oBAAegB,EAAKN,UAAY,YAAc,IAA3D,SAAkED,IAClE,wBAAQT,UAAU,UAAUO,QAZV,WAClBT,EAASD,EAAMsB,KAAI,SAACC,GAChB,OAAGA,EAAKT,KAAOK,EAAKL,GACT,2BACAS,GADP,IACaV,WAAYU,EAAKV,YAE1BU,OAMZ,SACI,mBAAGpB,UAAU,mBAEjB,wBAAQA,UAAU,SAASO,QAlBV,WACjBT,EAASD,EAAMwB,QAAO,SAACC,GAAD,OAAQA,EAAGX,KAAOK,EAAKL,QAiB7C,SACI,mBAAGX,UAAU,2BCDVuB,EApBE,SAAC,GAAuC,IAAtC1B,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAgB0B,GAAc,EAApBR,KAAoB,EAAdQ,UACtC,OACI,qBAAKxB,UAAU,iBAAf,SACA,oBAAIA,UAAU,YAAd,SACKwB,EAASL,KAAI,SAACH,GAAD,OACV,cAAC,EAAD,CACAP,KAAMO,EAAKP,KAEXZ,MAAOA,EACPmB,KAAMA,EACNlB,SAAUA,EACV0B,SAAUA,GAJLR,EAAKL,YCmDXc,MAxDf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACN/B,EADM,KACKC,EADL,OAEa8B,mBAAS,IAFtB,mBAEN7B,EAFM,KAECC,EAFD,OAGe4B,mBAAS,OAHxB,mBAGNC,EAHM,KAGE5B,EAHF,OAImB2B,mBAAS,IAJ5B,mBAINF,EAJM,KAIII,EAJJ,KAmCb,OAHAC,qBAAU,YATY,WACpB,GAAmC,OAAhCC,aAAaC,QAAQ,SACtBD,aAAaE,QAAQ,QAASC,KAAKC,UAAU,SAC1C,CACH,IAAIC,EAAaF,KAAKG,MAAMN,aAAaC,QAAQ,UACjDjC,EAASqC,IAIIE,KAAkB,IACnCR,qBAAU,YA3BW,WACnB,OAAOF,GACL,IAAK,YACHC,EAAY/B,EAAMwB,QAAO,SAAAL,GAAI,OAAuB,IAAnBA,EAAKN,cACtC,MACF,IAAK,cACHkB,EAAY/B,EAAMwB,QAAO,SAAAL,GAAI,OAAuB,IAAnBA,EAAKN,cACtC,MACF,QACEkB,EAAY/B,IAkBFyC,GAbZR,aAAaE,QAAQ,QAASC,KAAKC,UAAUrC,MAaE,CAACA,EAAO8B,IAGzD,sBAAK3B,UAAU,MAAf,UACE,iCACE,8CAEF,cAAC,EAAD,CAEEH,MAAOA,EACPC,SAAUA,EACVH,UAAWA,EACXC,aAAcA,EACdG,UAAWA,IAEb,cAAC,EAAD,CACAF,MAAOA,EACPC,SAAUA,EACV0B,SAAUA,QC5CDe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f1c24654.chunk.js","sourcesContent":["import React from \"react\";\r\n// I need to import here all the info from the states that I'm gonna use\r\nconst Form = ({inputText, setInputText, todos, setTodos, setStatus }) => {\r\n    const handleInputText = (e) => {\r\n        // {setInputText} is now a variable that I can use wherever I want, in this case it changes everythime I write\r\n        setInputText(e.target.value);\r\n    };\r\n    const handleSubmitTodo = (e) => {\r\n        e.preventDefault();\r\n        // Every todo will be an object with the text, completed and id attributes.\r\n        setTodos([...todos, {text: inputText, completed: false, id: Math.random()*1000}])\r\n        setInputText(\"\");\r\n    };\r\n    const handleStatus = (e) => {\r\n        setStatus(e.target.value)\r\n    }\r\n    return (\r\n        <form>\r\n        <div className=\"add-todo\">\r\n            <input\r\n            value = {inputText}\r\n            onChange={handleInputText}\r\n            type=\"text\"\r\n            className=\"todo-input\"\r\n            placeholder=\"What do you need to do?\"\r\n            />\r\n            <button\r\n            onClick={handleSubmitTodo}\r\n            className=\"todo-button\"\r\n            type=\"submit\"\r\n            >\r\n            <i className=\"fas fa-plus\"></i>\r\n            </button>\r\n        </div>\r\n        <div onChange= {handleStatus} className=\"select\">\r\n            <select name=\"todos\" className=\"filter-todos\">\r\n            <option value=\"all\">All</option>\r\n            <option value=\"completed\">Completed</option>\r\n            <option value=\"uncompleted\">Uncompleted</option>\r\n            </select>\r\n        </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Todo = ({ text, todo, todos, setTodos }) => {\r\n    console.log(todos)\r\n  // Events\r\n    const handleDelete = () => {\r\n        setTodos(todos.filter((el) => el.id !== todo.id))\r\n    };\r\n    const handleChecked = () => {\r\n        setTodos(todos.map((item) => {\r\n            if(item.id === todo.id) {\r\n                return {\r\n                    ...item, completed: !item.completed\r\n                }\r\n            }return item\r\n        }))\r\n    }\r\n    return (\r\n        <div className=\"todo-div\">\r\n        <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>{text}</li>\r\n        <button className=\"checked\" onClick={handleChecked}>\r\n            <i className=\"fas fa-check\"></i>\r\n        </button>\r\n        <button className=\"delete\" onClick={handleDelete}>\r\n            <i className=\"far fa-trash-alt\"></i>\r\n        </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\"\r\n\r\nconst Todolist = ({todos, setTodos, todo, filtered}) => {\r\n    return (\r\n        <div className=\"todo-container\">\r\n        <ul className=\"todo-list\">\r\n            {filtered.map((todo) => (\r\n                <Todo \r\n                text={todo.text} \r\n                key={todo.id} \r\n                todos={todos} \r\n                todo={todo} \r\n                setTodos={setTodos}\r\n                filtered={filtered}\r\n                />\r\n            ))\r\n            }\r\n        </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todolist;\r\n","import \"./App.css\";\nimport Form from \"./components/Form\";\nimport Todolist from \"./components/Todolist\";\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filtered, setFiltered] = useState([]);\n\n  const handleFilter = () => {\n    switch(status){\n      case 'completed':\n        setFiltered(todos.filter(todo => todo.completed === true))\n        break;\n      case 'uncompleted':\n        setFiltered(todos.filter(todo => todo.completed === false))\n        break;\n      default:\n        setFiltered(todos)\n    }\n  }\n\n  const saveLocalTodos = () => {\n      localStorage.setItem('todos', JSON.stringify(todos))\n  }\n\n  const getLocalTodos = () => {\n    if(localStorage.getItem('todos')===null){\n      localStorage.setItem('todos', JSON.stringify([]));\n    }else{\n      let localTodos = JSON.parse(localStorage.getItem('todos'))\n      setTodos(localTodos)\n    }\n  }\n\n  useEffect(() => {getLocalTodos()}, [])\n  useEffect(()=> {handleFilter(); saveLocalTodos()}, [todos, status])\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>To-do List</h1>\n      </header>\n      <Form\n        // Make these accesible in the components\n        todos={todos}\n        setTodos={setTodos}\n        inputText={inputText}\n        setInputText={setInputText}\n        setStatus={setStatus}\n      />\n      <Todolist \n      todos={todos} \n      setTodos={setTodos}\n      filtered={filtered} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}